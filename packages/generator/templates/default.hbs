// Required
import type { RouteContext, ProvidedRouteContext } from '@kita/runtime';
import fp from 'fastify-plugin';

// Addons
{{#each imports.addons}}
  {{this}}
{{/each}}

// Controllers
{{#each imports.controllers}}
  {{this}}
{{/each}}

// Param Resolvers
{{#each imports.params}}
  {{this}}
{{/each}}

export const KitaConfig = Object.freeze({{json config}});

export const KitaSchema = Object.freeze({{json schema}});

export const Kita = fp<{ context: ProvidedRouteContext }>((fastify, options) => {
  const context: RouteContext = { ...options.context, config: KitaConfig, fastify };

  fastify.addSchema(KitaSchema);

  {{#each routes}}

    fastify.{{method}}(
      '{{path}}',
      {
        schema: {{json schema}},
        {{options}}
      },
      async (request, reply) => {
        {{#each parameters}}
          {{#if helper}}

            {{helper}}

            if (reply.sent) {
              return;
            }
          {{/if}}
        {{/each}}

        const data = await {{controllerName}}.{{method}}.apply(context, [{{paramsToString parameters}}]);
        
        if (reply.sent) {
          if (data) {
            const error = new Error('Reply already sent, but controller returned data');
            //@ts-expect-error - TODO: generate better error message
            error.data = data;
            throw error;
          }

          return;
        }

        return data
      }
    );
  {{/each}}
});

export const HBS_CONF = {{json this}};
