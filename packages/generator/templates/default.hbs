// Required
import type { RouteContext, ProvidedRouteContext } from '@kitajs/runtime';
import fp from 'fastify-plugin';

// Addons
{{#each imports.addons}}
  {{this}}
{{/each}}

// Controllers
{{#each imports.controllers}}
  {{this}}
{{/each}}

// Param Resolvers
{{#each imports.params}}
  {{this}}
{{/each}}

/** The resultant config read from your kita config file. */
export const KitaConfig = {{json config}};

/** The fastify plugin to be registered. */
export const Kita = fp<{ context: ProvidedRouteContext }>((fastify, options) => {
  const context: RouteContext = { config: KitaConfig, fastify, ...options.context };

  {{#each schemas}}
    fastify.addSchema({{json this}});

  {{/each}}

  {{#each routes}} 
    fastify.route({
      method: {{#if (isAllMethod method)}}['DELETE', 'GET', 'HEAD', 'PATCH', 'POST', 'PUT', 'OPTIONS']{{else}}'{{uppercase method}}'{{/if}},
      url: '{{path}}',
      schema: {{json schema}},
      handler: async (request, reply) => {
        {{#each parameters}}
          {{#if helper}}
            {{helper}}

            if (reply.sent) {
              return;
            }

          {{/if}}
        {{/each}}

        const data = await {{controllerName}}.{{method}}.apply(context, [{{paramsToString parameters}}]);
        
        if (reply.sent) {
          //@ts-ignore - When {{controllerName}}.{{method}}() returns nothing, typescript gets mad.
          if (data) {
            throw Helpers.replyAlreadySent(data);
          }

          return;
        }

        return data;
      },
      {{options}}
    });
    
  {{/each}}

  // Ensure this function remains a "async" function
  return Promise.resolve();
});

/** Internal helpers to this template */
export const Helpers = {
  replyAlreadySent(data: any) {
    const error = new Error('Reply already sent, but controller returned data');
    
    //@ts-expect-error - include data in error to help debugging
    error.data = data;
    
    return error;
  }
}

/** Handlebars data for hydration, just for debugging purposes. */
export const HBS_CONF = {{json this}};
